@startuml
!theme plain
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam nodesep 5
skinparam ranksep 50

package "LibGDX" {
  class Screen {
    + show(): void    
    + render(delta: float): void    
    + resize(width:int, height:int):void    
    + pause():void    
    + resume():void    
    + hide():void    
    + dispose():void    
  }
    
  class Sprite {
  	+ texture(Texture)
  	+ x(float)
  	+ y(float)
  	+ width(float)
  	+ height(float)
  	+ draw(SpriteBatch)
  }
    
  class Stage {
  	+ viewport(Viewport)
  	+ actors(Array<Actor>)
  	+ root(Group)
  	+ batch(SpriteBatch)
  	+ addActor(Actor)
  	+ draw()
  	+ act(float)
  }
    
  class Viewport {
  	+ worldWidth(float)
  	+ worldHeight(float)
  	+ screenWidth(int)
  	+ screenHeight(int)
  	+ camera(Camera)
  	+ update(int, int, boolean)
  	+ apply()
  }
    
  class OrthographicCamera {
  	+ zoom(float)
  	+ position(Vector3)
  	+ direction(Vector3)
  	+ up(Vector3)
  	+ near(float)
  	+ far(float)
  	+ setToOrtho(boolean, float, float)
  	+ update()
  }

  class TiledMap {
    + getLayers(): MapLayers
    + getProperties(): MapProperties
    + getTileSets(): TiledMapTileSets
    + dispose(): void
    + getTile(int, int): TiledMapTile
    + getWidth(): int
    + getHeight(): int
    + getTileWidth(): int
    + getTileHeight(): int
  }

  class OrthogonalTiledMapRenderer {
    - map: TiledMap
    - unitScale: float
    + OrthogonalTiledMapRenderer(TiledMap)
    + setView(OrthographicCamera)
    + render(): void
    + dispose(): void
  }

  class TmxMapLoader {
    + load(String): TiledMap
  }

}

package "Core" {
  class EternalGame {
    - batch: SpriteBatch
    - VIRTUAL_WIDTH: int
    - VIRTUAL_HEIGHT: int
    + getBatch(): SpriteBatch
    + getVirtualWidth(): int
    + getVirtualHeight(): int
    + getMapRenderer(): OrthogonalTiledMapRenderer
    + loadMap(String): void
    + create(): void
    + dispose(): void
    + run(): void
  }
}

package "Screens" {
  package "Menus" {
    abstract class MenuScreen {
      - stage: Stage
      - skin: Skin
      - backgroundTexture: Texture
      - menuTable: Table
      - screen: Screen
      + MenuScreen(): void
      + show(): void
      + getMenuTable(): Table
      + getSkin(): Skin
      + render(delta: float): void
      + resize(width: int, height: int): void
      + dispose(): void
    }

    class MainMenuScreen {
      - game: EternalGame
      + MainMenuScreen(game: EternalGame): void
      - startNewGame(): void
      - continueGame(): void
      - openOptions(): void
      - openLoadMenu(): void
      - exitApp(): void
      + show(): void
      + render(delta: float): void
      + resize(width: int, height: int): void
      + dispose(): void
    }

    class SavesMenuScreen {
      - game: EternalGame
      - saveFilesManager: SaveFilesManager
      + SavesMenuScreen(game: EternalGame): void
      - displaySaveFiles(): void
      + show(): void
      + render(delta: float): void
      + resize(width: int, height: int): void
      + dispose(): void
    }

    class LoadMenuScreen {
      - game: EternalGame
      - saveFilesManager: SaveFilesManager
      + LoadMenuScreen(game: EternalGame): void
      - displaySaveFiles(): void
      - loadSelectedSave(saveFile: SaveFile): void
      + show(): void
      + render(delta: float): void
      + resize(width: int, height: int): void
      + dispose(): void
    }

    class OptionsMenuScreen {
      - game: EternalGame
      + OptionsMenuScreen(game: EternalGame): void
      - adjustVolume(): void
      - toggleFullscreen(): void
      - changeLanguage(): void
      + show(): void
      + render(delta: float): void
      + resize(width: int, height: int): void
      + dispose(): void 
    }

    class PauseMenuScreen {
       - game: EternalGame 
       + PauseMenuScreen(game: EternalGame): void 
       - resumeGame(): void 
       - saveGame(): void 
       - quitToMainMenu(): void 
       + show(): void 
       + render(delta: float): void 
       + resize(width: int, height: int): void 
       + dispose(): void 
     }
  }

  package "Levels" {
    abstract class BaseLevel {
        # game: EternalGame 
        # gameCamera: OrthographicCamera 
        # gameViewport: Viewport 
        # screen: Screen 
        + BaseLevel(game: EternalGame): void
        - mapRenderer: OrthogonalTiledMapRenderer
        # setupCommonResources(): void 
        # setupLevel(): void 
        + resize(width: int, height: int): void 
        + render(delta: float): void 
     }

     class Knowledge {
        - stage: Stage 
        - dialogue: Dialogue 
        - firstDialoguesBlock: List<Utterance> 
        - levelName: String 
        - difficulty: int 
        # setupLevel(): void 
        + show(): void 
        + render(delta: float): void 
        + resize(width: int, height: int): void 
        + dispose(): void 
     }

     class Emotion {
        - stage: Stage 
        - dialogue: Dialogue 
        - secondDialoguesBlock: List<Utterance> 
        - levelName: String 
        - difficulty: int 
        # setupLevel(): void 
        + show(): void 
        + render(delta: float): void 
        + resize(width: int, height: int): void 
        + dispose():void  
     }

     class Cognition {
         - stage : Stage  
         - dialogue : Dialogue  
         - thirdDialoguesBlock : List<Utterance>  
         - levelName : String  
         - difficulty : int  
         # setupLevel() :void  
         + show() :void  
         + render(delta :float) :void  
         + resize(width :int, height :int) :void  
         + dispose() :void  
     }

     class Perception {
         - stage : Stage  
         - dialogue : Dialogue  
         - fourthDialoguesBlock : List<Utterance>  
         - levelName : String  
         - difficulty : int  
         # setupLevel() :void  
         + show() :void  
         + render(delta :float) :void  
         + resize(width :int, height :int) :void  
         + dispose() :void  
     }

     class Consciousness {
          - stage : Stage  
          - dialogue : Dialogue  
          - finalDialoguesBlock : List<Utterance>  
          - levelName : String  
          - difficulty : int  
          # setupLevel() :void  
          + show() :void  
          + render(delta :float) :void  
          + resize(width :int, height :int) :void  
          + dispose() :void   
     }
  }
}

package "Scenes" {
  class Dialogue {
    - stage(Stage)   
    - viewport(Viewport)   
    - font(BitmapFont)   
    - utteranceLabel(Label)   
    - interlocutorNameLabel(Label)   
    - buttonLeftLabel(Label)   
    - buttonRightLabel(Label)   
    - utterances(List<Utterance>)   
    - currentIndex(int)   
     
     Dialogue(EternalGame, List<Utterance>)   
     nextUtterance()   
     previousUtterance()   
     updateDialogue()   
     getStage()   
     getViewport()   
  }
}

package "Domain" {
  class Utterance {
    speakerID(String)     
	text(String)     
	Utterance(String, String)     
	getCharacterByID(String)     
	getSpeakerID()     
	getSpeakerName()     
	getSpeakerPicture(TextureRegionDrawable)     
	getText()     
	setText(String)     
	setSpeakerID(String)     
  }
}

package "Sprites" {
	class Character {        
	    name(String)        
	    speed(float)        
	    velocity(Vector2)        
	    update(float)        
	    move()        
	    jump()        
	    attack()        
	  }        
	
	  class Protagonist {        
	    handleControl()        
	  }        
	
	  class NPC {        
	    walkRoute()        
	    enemyDetection()        
	    setOpponent(Sprite)        
	    attackTheOpponent()        
	  }        
	
	  class FriendlyNPC {        
	    followProtagonist()        
	  }        
	
	  class Enemy {        
	    detectMainCharacter()        
	    detectFriendlyNpc()        
	  }         
}

EternalGame *-- MainMenuScreen
EternalGame *-- SavesMenuScreen
EternalGame *-- LoadMenuScreen
EternalGame *-- OptionsMenuScreen
EternalGame *-- PauseMenuScreen
EternalGame *-- "5" BaseLevel
EternalGame *-- TiledMap
EternalGame *-- OrthogonalTiledMapRenderer
TiledMap <.. TmxMapLoader

Screen <|.. MenuScreen
Screen <|.. BaseLevel

MenuScreen <|-- MainMenuScreen
MenuScreen <|-- SavesMenuScreen
MenuScreen <|-- LoadMenuScreen
MenuScreen <|-- OptionsMenuScreen
MenuScreen <|-- PauseMenuScreen

BaseLevel <|-- Knowledge
BaseLevel <|-- Emotion
BaseLevel <|-- Cognition
BaseLevel <|-- Perception
BaseLevel <|-- Consciousness

Dialogue *-- "1..*" Utterance
Dialogue -- BaseLevel

BaseLevel *-- OrthogonalTiledMapRenderer
BaseLevel *-- Viewport
BaseLevel *-- OrthographicCamera
Knowledge *-- Stage
Emotion *-- Stage
Cognition *-- Stage
Perception *-- Stage
Consciousness *-- Stage

Consciousness *-- Dialogue
Knowledge *-- Dialogue
Emotion *-- Dialogue
Cognition *-- Dialogue
Perception *-- Dialogue

Sprite <|-- Character
Character <|-- Protagonist
Character <|-- NPC
NPC <|-- FriendlyNPC
NPC <|-- Enemy

@enduml
